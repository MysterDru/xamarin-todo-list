// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using MvvmCross.Binding.BindingContext;
using MvvmCross.Platforms.Ios.Binding.Views;
using MvvmCross.Platforms.Ios.Presenters.Attributes;
using MvvmCross.Platforms.Ios.Views;
using UIKit;

namespace TodoApp.iOS.Views
{
	[MvxFromStoryboard]
	[MvxChildPresentation]
	public partial class ListInfoView : MvxViewController<ViewModels.ListInfoViewModel>
	{
		public ListInfoView(IntPtr handle)
			: base(handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			NavigationItem.BackBarButtonItem = new UIBarButtonItem("Back", UIBarButtonItemStyle.Plain, null);

			this.Title = "Todo List Info";

			UpdateDescriptionStyle();

			var save = new UIBarButtonItem(UIBarButtonSystemItem.Save);
			var options = new UIBarButtonItem(UIImage.FromBundle("ic_more"), UIBarButtonItemStyle.Done, null);

			this.NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { options, save };


			var source = new CustomDataSource(this, TableView, new NSString("ToDoItemCell"));
			TableView.Source = source;

			var set = this.CreateBindingSet<ListInfoView, ViewModels.ListInfoViewModel>();
			set.Bind(NavigationItem)
			   .For(x => x.Title)
			   .To(vm => vm.Title);
			set.Bind(source)
			   .For(x => x.ItemsSource)
			   .To(vm => vm.Items);
			set.Bind(source)
			   .For(x => x.SelectionChangedCommand)
			   .To(vm => vm.CompleteItem);
			set.Bind(TitleTextField)
			   .To(vm => vm.ListTitle);
			set.Bind(DescrptionTextView)
			   .To(vm => vm.ListDescription);
			set.Bind(AddButton)
			   .To(vm => vm.AddNewItem);
			set.Bind(save)
			   .To(vm => vm.SaveList);
			set.Bind(options)
			   .To(vm => vm.ShowOptions);
			set.Apply();
		}

		private void UpdateDescriptionStyle()
		{
			// make the text view look like a text field
			DescrptionTextView.Layer.BackgroundColor = UIColor.White.CGColor;
			DescrptionTextView.Layer.BorderColor = UIColor.Gray.CGColor;
			DescrptionTextView.Layer.BorderWidth = 0.25f;
			DescrptionTextView.Layer.CornerRadius = 4.0f;
			DescrptionTextView.Layer.MasksToBounds = true;
		}

		private class CustomDataSource : MvxStandardTableViewSource
		{
			ListInfoView viewController;
			public CustomDataSource(ListInfoView parentView, UITableView tableview, NSString identifier)
				: base(tableview, identifier)
			{
				viewController = parentView;
			}

			public override UITableViewRowAction[] EditActionsForRow(UITableView tableView, NSIndexPath indexPath)
			{
				UITableViewRowAction deleteButton = UITableViewRowAction.Create(
				UITableViewRowActionStyle.Default,
				"Delete",
				delegate
				{
					var item = GetItemAt(indexPath) as Models.TodoItem;
					viewController.ViewModel.DeleteItem.Execute(item);

				});
				return new UITableViewRowAction[] { deleteButton };
			}
		}

	}
}